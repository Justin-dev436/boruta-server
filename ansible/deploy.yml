- hosts: localhost
  tasks:
    - name: Add stable chart repo
      community.kubernetes.helm_repository:
        name: bitnami
        repo_url: https://charts.bitnami.com/bitnami

    - name: Create a k8s namespace
      community.kubernetes.k8s:
        api_version: v1
        name: boruta-staging
        kind: Namespace
        state: present

    - name: Install postgres helm package
      community.kubernetes.helm:
        name: postgres
        chart_ref: bitnami/postgresql
        release_namespace: boruta-staging
        values:
          postgresqlPassword: "{{ postgresql_password }}"

    - name: Create libcluster role
      community.kubernetes.k8s:
        state: present
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: Role
          metadata:
            name: libcluster-role
            namespace: boruta-staging
          rules:
          - apiGroups: [""]
            resources: ["pods"]
            verbs: ["get", "list", "watch"]

    - name: Create libcluster binding
      community.kubernetes.k8s:
        state: present
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: RoleBinding
          metadata:
            name: libcluster-bindings
            namespace: boruta-staging
          subjects:
          - kind: ServiceAccount
            name: default
            namespace: boruta-staging
          roleRef:
            kind: Role
            name: libcluster-role
            apiGroup: rbac.authorization.k8s.io

    - name: Create Admin Service
      community.kubernetes.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: boruta-admin
            namespace: boruta-staging
            labels:
              app: boruta
          spec:
            selector:
              app: boruta
            ports:
            - protocol: TCP
              targetPort: 4001
              name: admin-tcp
              port: 4001

    - name: Create Gateway Service
      community.kubernetes.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: boruta-gateway
            namespace: boruta-staging
            labels:
              app: boruta
          spec:
            selector:
              app: boruta
            ports:
            - protocol: TCP
              targetPort: 4000
              name: admin-tcp
              port: 4000

    - name: Create Boruta Ingress
      community.kubernetes.k8s:
        state: present
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: main-ingress
            namespace: boruta-staging
            # annotations:
            #   nginx.ingress.kubernetes.io/rewrite-target: /
          spec:
            rules:
            - host: "{{ gateway_host }}"
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: boruta-gateway
                      port:
                        number: 4000
            - host: "{{ oauth_host }}"
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: boruta-admin
                      port:
                        number: 4001
            - host: "{{ admin_host }}"
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: boruta-admin
                      port:
                        number: 4001
    - name: Setup boruta database
      community.kubernetes.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: boruta-env
            namespace: boruta-staging
          data:
            SECRET_KEY_BASE: fm6UIOyjYUe51Xo7JDTurwSeyOoZ15Kmlbj4NUhU9951P8cEUZc3k8bsAeJJtCvg
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: "{{ postgresql_password }}"
            POSTGRES_DATABASE: boruta
            POSTGRES_HOST: postgres-postgresql
            K8S_NAMESPACE: boruta-staging
            ADMIN_OAUTH_CLIENT_ID: "{{ admin_client_id }}"
            ADMIN_OAUTH_CLIENT_SECRET: "{{ admin_client_secret }}"
            ADMIN_OAUTH_BASE_URL: "{{ admin_oauth_host }}"
            BORUTA_ADMIN_HOST: "{{ admin_host }}"
            BORUTA_ADMIN_CLIENT_ID: "{{ admin_client_id }}"
            BORUTA_ADMIN_CLIENT_SECRET: "{{ admin_client_secret }}"
            VUE_APP_ADMIN_CLIENT_ID: "{{ admin_client_id }}"
            VUE_APP_BORUTA_BASE_URL: "{{ boruta_base_url }}"
            VUE_APP_OAUTH_BASE_URL: "{{ admin_oauth_host }}"
            VUE_APP_BORUTA_BASE_SOCKET_URL: "{{ vue_app_boruta_base_socket_url }}"

    - name: Setup boruta database
      register: database_setup
      community.kubernetes.k8s:
        state: present
        definition:
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: boruta-setup
            namespace: boruta-staging
          backoffLimit: 3
          spec:
            template:
              spec:
                containers:
                  - image: registry.gitlab.com/patatoid/boruta/app:latest
                    command: ["/app/bin/boruta"]
                    args: ["eval", "Boruta.Release.setup"]
                    envFrom:
                    - configMapRef:
                        name: boruta-env
                    imagePullPolicy: Always
                    name: boruta
                restartPolicy: OnFailure
                imagePullSecrets:
                - name: regcred

    - name: Migrate boruta database
      when: not database_setup.changed
      community.kubernetes.k8s:
        state: present
        definition:
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: "boruta-migration-{{ release_tag }}"
            namespace: boruta-staging
          backoffLimit: 3
          spec:
            template:
              spec:
                containers:
                  - image: "registry.gitlab.com/patatoid/boruta/app:{{ release_tag }}"
                    command: ["/app/bin/boruta"]
                    args: ["eval", "Boruta.Release.migrate"]
                    envFrom:
                    - configMapRef:
                        name: boruta-env
                    imagePullPolicy: Always
                    name: boruta
                restartPolicy: OnFailure
                imagePullSecrets:
                - name: regcred

    - name: Create Boruta deployment
      community.kubernetes.k8s:
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: boruta
            namespace: boruta-staging
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: boruta
            template:
              metadata:
                name: boruta
                labels:
                  app: boruta
              spec:
                containers:
                  - image: "registry.gitlab.com/patatoid/boruta/app:{{ release_tag }}"
                    readinessProbe:
                      httpGet:
                        path: /healthcheck
                        port: 4001
                    envFrom:
                    - configMapRef:
                        name: boruta-env
                    imagePullPolicy: Always
                    name: boruta
                imagePullSecrets:
                - name: regcred
